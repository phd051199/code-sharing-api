generator client {
  provider               = "prisma-client-js"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/gql"
  reExport = Directories
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?    @updatedAt() @map("updated_at")
  permissions Permission[]
  users       User[]

  @@map("roles")
}

enum Action {
  manage @map("manage")
  create @map("create")
  read   @map("read")
  update @map("update")
  delete @map("delete")
}

model Permission {
  id         Int       @id @default(autoincrement())
  roleId     Int       @map("role_id")
  action     Action
  subject    String    @db.VarChar(255)
  inverted   Boolean   @default(false)
  conditions Json?     @db.Json
  reason     String?   @db.Text()
  role       Role      @relation(fields: [roleId], references: [id])
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt() @map("updated_at")

  @@unique([roleId, action, subject])
  @@index([roleId])
  @@map("permissions")
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  userName    String?   @map("user_name") @db.MediumText
  displayName String?   @map("display_name") @db.MediumText
  avatar      String?   @db.MediumText
  roleId      Int       @map("role_id")
  /// @HideField()
  password    String?   @db.MediumText
  isVerified  Boolean   @default(false) @map("is_verified")
  lastLogin   DateTime? @map("last_login")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  role          Role           @relation(fields: [roleId], references: [id])
  authProviders AuthProvider[]
  scripts       Script[]
  userFavorite  UserFavorite[]

  @@index([roleId])
  @@index([email])
  @@map("users")
}

enum AuthProviders {
  google @map("google")
  github @map("github")
}

model AuthProvider {
  userId    Int           @map("user_id")
  provider  AuthProviders
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, userId])
  @@index([userId])
  @@map("auth_providers")
}

model Script {
  id           Int            @id @default(autoincrement())
  name         String?        @db.TinyText
  description  String?        @db.LongText
  icon         String?        @db.TinyText
  path         String?        @db.MediumText
  authorId     Int            @map("author_id")
  categoryId   Int?           @map("category_id")
  user         User           @relation(fields: [authorId], references: [id])
  category     Category?      @relation(fields: [categoryId], references: [id])
  userFavorite UserFavorite[]
  bundleDetail BundleDetail?
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")

  @@index([categoryId])
  @@index([authorId])
  @@map("scripts")
}

model UserFavorite {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  scriptId  Int      @map("script_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])
  script    Script   @relation(fields: [scriptId], references: [id])

  @@unique([userId, scriptId])
  @@index([userId, scriptId])
  @@index([scriptId])
  @@map("user_favorites")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  scripts   Script[]

  @@map("categories")
}

enum BuildStatus {
  waiting   @map("waiting")
  running   @map("running")
  uploading @map("uploading")
  success   @map("success")
  failed    @map("failed")
}

model BundleDetail {
  id           Int          @id @default(autoincrement())
  scriptId     Int          @unique @map("script_id")
  bundlePath   String?      @map("bundle_path") @db.MediumText
  priority     Int?
  status       BuildStatus?
  failedReason String?      @map("failed_reason") @db.LongText
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  script       Script       @relation(fields: [scriptId], references: [id], onDelete: Cascade)

  @@index([scriptId])
  @@map("bundle_detail")
}
