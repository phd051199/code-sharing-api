generator client {
  provider               = "prisma-client-js"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/gql"
  reExport = Directories
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

enum Role {
  admin @map("admin")
  user  @map("user")
}

model User {
  id    Int    @id @default(autoincrement())
  email String @unique
  role  Role   @default(user)

  /// @HideField()
  password  String?   @db.MediumText
  lastLogin DateTime? @map("last_login")

  /// @HideField()
  createdAt DateTime @default(now()) @map("created_at")
  /// @HideField()
  updatedAt DateTime @updatedAt @map("updated_at")

  userScripts    UserScript[]
  oauthProviders OAuthProvider[]
  profile        Profile?

  @@map("users")
}

model Profile {
  id   Int     @id @default(autoincrement())
  name String? @db.MediumText

  userId Int  @unique @map("user_id")
  /// @HideField()
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("profile")
}

enum OAuthProviders {
  google @map("google")
  github @map("github")
}

model OAuthProvider {
  provider OAuthProviders
  userId   Int            @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  /// @HideField()
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, userId])
  @@index([userId])
  @@map("oauth_provider")
}

model Script {
  id          Int     @id @default(autoincrement())
  name        String? @db.TinyText
  description String? @db.LongText
  path        String  @db.MediumText

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userScripts UserScript[]

  @@map("scripts")
}

model UserScript {
  userId   Int @map("user_id")
  scriptId Int @map("script_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  script Script @relation(fields: [scriptId], references: [id])

  @@unique([userId, scriptId])
  @@index([userId])
  @@index([scriptId])
  @@map("user_scripts")
}
