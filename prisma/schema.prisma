generator client {
  provider               = "prisma-client-js"
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/gql"
  reExport = Directories
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  // directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Role {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()

  permissions Permission[]
  users       User[]

  @@map("roles")
}

enum Action {
  manage @map("manage")
  create @map("create")
  read   @map("read")
  update @map("update")
  delete @map("delete")
}

model Permission {
  id         Int     @id @default(autoincrement())
  role_id    Int
  action     Action
  subject    String  @db.VarChar(255)
  inverted   Boolean @default(false)
  conditions Json?   @db.Json
  reason     String? @db.Text()

  role Role @relation(fields: [role_id], references: [id])

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()

  @@unique([role_id, action, subject])
  @@index([role_id])
  @@map("permissions")
}

model User {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  user_name    String? @db.MediumText
  display_name String? @db.MediumText
  avatar       String? @db.MediumText
  role_id      Int

  /// @HideField()
  password    String?   @db.MediumText
  is_verified Boolean   @default(false)
  last_login  DateTime?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  role           Role           @relation(fields: [role_id], references: [id])
  auth_providers AuthProvider[]
  scripts        Script[]

  @@index([role_id])
  @@index([email])
  @@map("users")
}

enum AuthProviders {
  google @map("google")
  github @map("github")
}

model AuthProvider {
  provider   AuthProviders
  user_id    Int
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, user_id])
  @@index([user_id])
  @@map("auth_providers")
}

enum ScriptStatus {
  waiting @map("waiting")
  running @map("running")
  success @map("success")
  failed  @map("failed")
}

model Script {
  id          Int      @id @default(autoincrement())
  name        String?  @db.TinyText
  description String?  @db.LongText
  path        String?  @db.MediumText
  bundle      String?  @db.MediumText
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user_id     Int

  status        ScriptStatus?
  failed_reason String?       @db.LongText

  user User @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@map("scripts")
}
