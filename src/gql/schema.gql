# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserCountAggregate {
  id: Int!
  email: Int!
  role: Int!
  lastLogin: Int!
  _all: Int!
}

type UserAvgAggregate {
  id: Float
}

type UserSumAggregate {
  id: Int
}

type UserMinAggregate {
  id: Int
  email: String
  role: Role
  lastLogin: DateTime
}

enum Role {
  admin
  user
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserMaxAggregate {
  id: Int
  email: String
  role: Role
  lastLogin: DateTime
}

type UserCount {
  userScripts: Int!
  oauthProviders: Int!
}

type ScriptCount {
  userScripts: Int!
}

type Script {
  id: ID!
  name: String
  description: String
  path: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userScripts: [UserScript!]
  _count: ScriptCount!
}

type UserScript {
  userId: Int!
  scriptId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  script: Script!
}

type OAuthProvider {
  provider: OAuthProviders!
  userId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum OAuthProviders {
  google
  github
}

type Profile {
  id: ID!
  name: String
  userId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: ID!
  email: String!
  role: Role!
  lastLogin: DateTime
  userScripts: [UserScript!]
  oauthProviders: [OAuthProvider!]
  profile: Profile
  _count: UserCount!
}

type AuthResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Status {
  status: String!
}

type HealthDetails {
  network: Status
  redis: Status
}

type HealthInfo {
  status: String!
  info: HealthDetails!
  error: HealthDetails!
}

type Query {
  healthCheck: HealthInfo!
  getUser(id: Int!): User
}

type Mutation {
  login(loginInput: LoginInput!): AuthResponse!
  register(registerInput: RegisterInput!): AuthResponse!
  refreshToken(refreshTokenInput: RefreshTokenInput!): AuthResponse!
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  email: String!
  password: String!
  name: String
}

input RefreshTokenInput {
  refreshToken: String!
}