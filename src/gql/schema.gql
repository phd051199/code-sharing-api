# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserCountAggregate {
  id: Int!
  email: Int!
  user_name: Int!
  display_name: Int!
  role_id: Int!
  password: Int!
  last_login: Int!
  created_at: Int!
  updated_at: Int!
  _all: Int!
}

type UserAvgAggregate {
  id: Float
  role_id: Float
}

type UserSumAggregate {
  id: Int
  role_id: Int
}

type UserMinAggregate {
  id: Int
  email: String
  user_name: String
  display_name: String
  role_id: Int
  password: String
  last_login: DateTime
  created_at: DateTime
  updated_at: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserMaxAggregate {
  id: Int
  email: String
  user_name: String
  display_name: String
  role_id: Int
  password: String
  last_login: DateTime
  created_at: DateTime
  updated_at: DateTime
}

type UserCount {
  auth_providers: Int!
  scripts: Int!
}

type Permission {
  id: ID!
  role_id: Int!
  action: Action!
  subject: String!
  inverted: Boolean!
  conditions: JSON
  reason: String
  created_at: DateTime!
  updated_at: DateTime
  role: Role!
}

enum Action {
  manage
  create
  read
  update
  delete
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type RoleCount {
  permissions: Int!
  users: Int!
}

type Role {
  id: ID!
  name: String!
  created_at: DateTime!
  updated_at: DateTime
  permissions: [Permission!]
  users: [User!]
  _count: RoleCount!
}

type AuthProvider {
  provider: AuthProviders!
  user_id: Int!
  created_at: DateTime!
  updated_at: DateTime!
  user: User!
}

enum AuthProviders {
  google
  github
}

type Script {
  id: ID!
  name: String
  description: String
  path: String!
  created_at: DateTime!
  updated_at: DateTime!
  user_id: Int!
  user: User!
}

type User {
  id: ID!
  email: String!
  user_name: String
  display_name: String
  role_id: Int!
  password: String
  last_login: DateTime
  created_at: DateTime!
  updated_at: DateTime!
  role: Role!
  auth_providers: [AuthProvider!]
  scripts: [Script!]
  _count: UserCount!
}

type AuthResponse {
  accessToken: String!
  refreshToken: String!
  user: User!
}

type Status {
  status: String!
}

type HealthDetails {
  network: Status
  redis: Status
  prisma: Status
}

type HealthInfo {
  status: String!
  info: HealthDetails!
  error: HealthDetails!
}

type Query {
  healthCheck: HealthInfo!
  getUser(id: Int!): User
}

type Mutation {
  login(loginInput: LoginInput!): AuthResponse!
  register(registerInput: RegisterInput!): AuthResponse!
  refreshToken(refreshTokenInput: RefreshTokenInput!): AuthResponse!
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  email: String!
  password: String!
  name: String
}

input RefreshTokenInput {
  refreshToken: String!
}